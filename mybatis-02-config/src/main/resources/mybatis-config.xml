<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 1. 用于引入外部property配置文件。最多用在数据源的配置上。
	 	 和spring集成后，数据源都由spring很方便配置，这个标签基本也没用了。-->
	<properties resource="dbconfig.properties" />

	<!-- 2. 这是 MyBatis 中极为重要的调整设置，它们会改变MyBatis 的运行时行为。 -->
	<settings>
		<setting name="mapUnderscoreToCamelCase" value="true"/>
	</settings>

	<!-- 3. 给Java类起别名，简化书写。 别名不区分大小写 -->
	<typeAliases>
		<!--1. 给单独一个类起别名。默认别名：employee，类名(不区分大小写).
			alias:指定新名 -->
		<typeAlias type="com.xiuwei.POJO.Employee" alias="emp"/>

		<!-- 2. package: 为某个包下的类批量起别名（适合类很多时）
			name: 为当前包和下面所有后代包都起一个默认别名（类名(不区分大小写)）
			-->
		<package name="com.xiuwei.POJO"/>

		<!-- 3. 如果类名存在冲突（如包和子包都有Employee类），用@Alias注解，为类型指定新的别名。 -->
	</typeAliases>

	<!-- 4. Mybatis可以配置多个环境信息。 default指定使用哪个环境，达到快速切换。 （结合Spring后主要用Spring的，这里了解即可。）
		 environment必须有2个标签：
			transactionManager：配置事务管理器，type为类型，支持2种：JDBC(JDBC的commit/rollback, JDBCTransactionFactory) | MANAGED(容器的 ManagedTransactionFactory)。
				自定义事务管理器，实现TransactionFactory接口。type指定全类名。

			DataSource: 数据源；
				type: 数据源类型，POOLED | UNPOOLED | JNDI (这三个也是具体三个类的别名 xxxDataSourceFactory)
				自定义数据源：实现DataSourceFactory接口 。type指定全类名。
	-->
	<environments default="development">
		<environment id="test">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}"/>
				<property name="username" value="${jdbc.username}"/>
				<property name="password" value="${jdbc.password}"/>
			</dataSource>
		</environment>
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}"/>
				<property name="username" value="${jdbc.username}"/>
				<property name="password" value="${jdbc.password}"/>
			</dataSource>
		</environment>
	</environments>

	<!-- 5. databaseIdProvider: 支持多数据库厂商
		type="DB_VENDOR": VendorDatabaseIdProvider
			作用就是得到数据库厂商标识（MySQL, Oracle, SQL Server等）。mybatis能根据数据库厂商标识来执行不同sql。
	-->
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同的数据库厂商起别名 -->
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
	</databaseIdProvider>

	<!-- 5. mappers: 将sql mapper注册到全局配置中。
	-->
	<mappers>
		<!-- mapper:
			方式1. 注册配置文件：
			resource: 引用类路径下的sql mapper文件
			url: 引用网络路径或磁盘路径下的sql mapper文件

			方式2. 注册接口：
			class: 接口(狂神spring5 "mybatis集成"的例子就是注册的接口)。 几个实现方式:
				1、有mapper文件，必须和接口同名，而且必须放到与接口(.java)同一目录下
				2、没有mapper文件，所有的sql都是利用注解写接口上（例子：）
			建议：
				1. 重要的、复杂的DAO接口，用mapper文件； （毕竟mybatis的初衷就是sql和java源码分离）
				2. 不重要的、简单地接口，可以用注解。
		-->
		<!-- <mapper resource="EmployeeMapper2.xml" /> -->	<!-- 方式1. 注册配置文件 -->
		<!-- <mapper class="com.xiuwei.dao.EmployeeMapperAnnotation" />  --> <!-- 基于注解的 -->

		<!-- 批量注册. 也可以。注意mapper文件方式想生效，mapper文件得和接口同名，而且必须放到与接口目录。 -->
		<package name="com.xiuwei.dao"/>
	</mappers>

</configuration>